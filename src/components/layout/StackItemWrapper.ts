import { defineComponent, h, ref, onMounted, watch, Component } from "vue";
import { v4 as uuidv4 } from "uuid";
import { CompProps, PageComponent } from "./StackEvent";

//import { PageComponents } from "@/components/dynamic/autogenerated/PageComponents";
//import { useDynamicLoader } from "@/components/layout/DynamicLoader";

export default defineComponent({
  name: "GridStackItemWrapper",
  props: {
    gsItem: Object,
    //StackCompProps: Object,
    gsPageProps: Object,
    gsRegister: Function,
    gsRemove: Function,
    gsHandlers: Object,
    gsInvoke: Function,
    gsOptions: Object,
    components: Array<PageComponent>,
  },

  setup(props, { slots, emit }) {
    /**
     * StackComponent reactive props
     */
    const compProps = ref<CompProps>();

    const component = ref<Component>();

    //const config: any = inject(eventSymbol.gsPageConfigOptions, false);
    //console.log("inject config in item: ", config);

    /**
     * get StackComponent
     */
    //const { gsGetItemCompnent, gsGetComponentInfo } = usePageComponents();

    onMounted(async () => {
      await addWidgetComponentCB(props.gsItem);
      (await resolveStackComponent(props.gsItem)) as any;
    });

    /**
     * when creating page, drag StackComponent into page firstly
     * @param item
     */
    const addWidgetComponentCB = async (item: any) => {
      const itemEl = item.el;
      const itemElContent = itemEl.querySelector(".grid-stack-item-content");

      //if widget added by drag or add new create button
      const newWidget = itemEl.className.match(/newWidget\s/);
      if (newWidget) {
        const componentName = itemElContent.getAttribute("StackComponent");
        if (!componentName) {
          throw "No componnent info found!, newWidget must set StackComponent attrbute as component info\n <div class='newWidget ...' StackComponent=xxx>...</div>";
        }
        //const { importComponent} = useDynamicLoader();
        //const comp = await importComponent(config, componentName) as any;
        const comp = props.components?.find(
          (gs) => gs.props.cname == componentName
        );
        if (comp) {
          const props = comp.props;
          const property =
            typeof props === "function" ? (props as Function)() : props;
          property["cid"] = `comp_${uuidv4()}`;

          const c = comp.component;
          const renderComp = typeof c === "function" ? (c as Function)() : c;
          component.value = renderComp;

          compProps.value = property;
          //see: GridItemOptions
          item["stackComponent"] = property;
        }
      }
    };

    /**
     * Get StackComponent and it's props definition
     * @param item
     * @returns
     */
    const resolveStackComponent = async (item: any) => {
      //see: GridItemOptions
      const propInfo = item["stackComponent"];
      if (!propInfo) {
        return null;
      }
      compProps.value = propInfo;
      if (!component.value) {
        const comp = props.components?.find(
          (gs) => gs.props.cname == compProps.value?.cname
        );
        if (!comp) {
          return null;
        }
        const c = comp.component;
        const renderComp = typeof c === "function" ? c() : c;
        component.value = renderComp;
      }
    };

    watch(compProps, () => {
      console.log("component data changed: ", compProps.value);
    });

    return () => {
      console;
      if (!component.value || !compProps.value || !compProps.value.cid) {
        return null;
      }
      return h(component.value, {
        cid: compProps.value.cid,
        //component props
        StackComponent: compProps.value,
        //gridstackitem
        gsItem: props.gsItem,
        //page props
        gsPage: props.gsPageProps,
        gsRemove: props.gsRemove,
        gsRegister: props.gsRegister,
        ...props.gsHandlers,
        gsInvoke: props.gsInvoke,
        gsOptions: props.gsOptions,
      });
    };
  },
});
