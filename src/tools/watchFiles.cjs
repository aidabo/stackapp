//
// Source auto generated for dynamically load function and components
//
const chokidar = require("chokidar");
const fs = require("fs");
const path = require("path");

const generatedDir = "autogenerated"

//auto generate GsComponents.ts
function autoGenerateComponent() {
  const watchedDir = path.join(__dirname, "../components/dynamic/component");
  const outputFilePath = path.join(
    __dirname,
    `../components/dynamic/${generatedDir}/GsComponents.ts`
  );

  function generate1() {
    return `
// auto-generated: GsComponents.ts: ${Date()}
//
import { reactive } from "vue";
import { PageCompnent } from "@/components/layout/GridEvent";
`;
  }

  function generate2(files) {
    return files
      .map((file) => {
        const cname = path.basename(file, path.extname(file));
        return `import {
        component as ${cname}_comp,
        props as ${cname}_props,
} from "@/components/dynamic/component/${cname}";`;
      })
      .join("\n");
  }

  function generate3() {
    return `\n\nexport const gsComponents = reactive<PageCompnent[]>([`;
  }

  function generate4(files) {
    return files
      .map((file) => {
        const cname = path.basename(file, path.extname(file));
        return `
  {
    props:
      typeof ${cname}_props === "function" ? ${cname}_props() : ${cname}_props,
    component:
      typeof ${cname}_comp === "function" ? ${cname}_comp() : ${cname}_comp,
  },`;
      })
      .join("\n");
  }

  function generate5() {
    return "\n]);\n";
  }

  function generateFileList() {
    let files = fs.readdirSync(watchedDir);
    const source = generate1()
      .concat(generate2(files))
      .concat(generate3())
      .concat(generate4(files))
      .concat(generate5());
    fs.writeFileSync(outputFilePath, source);
  }

  const watcher = chokidar.watch(watchedDir, {
    //ignored: /(^|[\/\\])\../, // 忽略点文件，如 .git, .DS_Store 等
    ignore: (path, stats) => stats?.isFile() && !path.endsWith(".ts"), // only watch ts files
    persistent: true,
  });

  watcher
    .on("add", (path) => {
      console.log(`File ${path} has been added`);
      generateFileList();
    })
    .on("change", (path) => {
      console.log(`File ${path} has been changed`);
      generateFileList();
    })
    .on("unlink", (path) => {
      console.log(`File ${path} has been removed`);
      generateFileList();
    });

  console.log(`Now watching ${watchedDir} for changes...`);

  generateFileList();
} //autoGenerateComponent

autoGenerateComponent();

//auto generate GsStores.ts
function autoGenerateStore() {
  const watchedDir = path.join(__dirname, "../components/dynamic/store");
  const outputFilePath = path.join(
    __dirname,
    `../components/dynamic/${generatedDir}/GsStores.ts`
  );

  function generate1() {
    return `
// auto-generated: GsStores.ts: ${Date()}
//
import { reactive } from "vue";
import { PageStore } from "@/components/layout/GridEvent";
`;
  }

  function generate2(files) {
    return files
      .map((file) => {
        const name = path.basename(file, path.extname(file));
        return `import { use${name} } from "@/components/dynamic/store/${name}";`;
      })
      .join("\n");
  }

  function generate3() {
    return `\n\nexport const gsStores = reactive<PageStore[]>([`;
  }

  function generate4(files) {
    return files
      .map((file) => {
        const name = path.basename(file, path.extname(file));
        return `{
        name: "${name}",
        store: use${name},
      },`;
      })
      .join("\n");
  }

  function generate5() {
    return "\n]);\n";
  }

  function generateFileList() {
    let files = fs
      .readdirSync(watchedDir)
      .filter((path) => !path.match(/storeConstants/));
    const source = generate1()
      .concat(generate2(files))
      .concat(generate3())
      .concat(generate4(files))
      .concat(generate5());
    fs.writeFileSync(outputFilePath, source);
  }

  const watcher = chokidar.watch(watchedDir, {
    //ignored: /(^|[\/\\])\../, // 忽略点文件，如 .git, .DS_Store 等
    ignored: (path, stats) =>
      stats?.isFile() &&
      (!path.endsWith(".ts") || path.match(/storeConstants/)), // only watch ts files
    persistent: true,
  });

  watcher
    .on("add", (path) => {
      console.log(`File ${path} has been added`);
      generateFileList();
    })
    .on("change", (path) => {
      console.log(`File ${path} has been changed`);
      generateFileList();
    })
    .on("unlink", (path) => {
      console.log(`File ${path} has been removed`);
      generateFileList();
    });

  console.log(`Now watching ${watchedDir} for changes...`);
  generateFileList();
} //autoGenerateStore

autoGenerateStore();

//auto generate GsHandlers.ts
function autoGenerateHandlers() {
  const watchedDir = path.join(__dirname, "../components/dynamic/handlers");
  const outputFilePath = path.join(
    __dirname,
    `../components/dynamic/${generatedDir}/GsHandlers.ts`
  );

  function generate1() {
    return `
// auto-generated: GsHandlers.ts: ${Date()}
//
import { reactive } from "vue";
import { PageHandler } from "@/components/layout/GridEvent";
`;
  }

  function generate2(files) {
    return files
      .map((file) => {
        const name = path.basename(file, path.extname(file));
        return `import { use${name} } from "@/components/dynamic/handlers/${name}";`;
      })
      .join("\n");
  }

  function generate3() {
    return `\n\nexport const gsHandlers = reactive<PageHandler[]>([`;
  }

  function generate4(files) {
    return files
      .map((file) => {
        const name = path.basename(file, path.extname(file));
        return `{
        name: "${name}",
        handler: use${name},
      },`;
      })
      .join("\n");
  }

  function generate5() {
    return "\n]);\n";
  }

  function generateFileList() {
    let files = fs.readdirSync(watchedDir);
    const source = generate1()
      .concat(generate2(files))
      .concat(generate3())
      .concat(generate4(files))
      .concat(generate5());
    fs.writeFileSync(outputFilePath, source);
  }

  const watcher = chokidar.watch(watchedDir, {
    //ignored: /(^|[\/\\])\../, // 忽略点文件，如 .git, .DS_Store 等
    ignored: (path, stats) => stats?.isFile() && !path.endsWith(".ts"), // only watch ts files
    persistent: true,
  });

  watcher
    .on("add", (path) => {
      console.log(`File ${path} has been added`);
      generateFileList();
    })
    .on("change", (path) => {
      console.log(`File ${path} has been changed`);
      generateFileList();
    })
    .on("unlink", (path) => {
      console.log(`File ${path} has been removed`);
      generateFileList();
    });

  console.log(`Now watching ${watchedDir} for changes...`);
  generateFileList();
}

autoGenerateHandlers();